MODEL:
  META_ARCHITECTURE: "DomainAdaptiveRCNN"
  IMG_FDA_ON: True
  INSTANCE_FDA_ON: True
  BACKBONE:
    NAME: "build_vgg_backbone"
  VGG:
    OUT_FEATURES: ["conv5_3"]
  # WEIGHTS: "https://download.pytorch.org/models/vgg16-397923af.pth"
  # WEIGHTS: "/lhome/peizhli/projects/model_zoo/vgg16-397923af.pth"
  RPN:
    IN_FEATURES: ["conv5_3"]
    PRE_NMS_TOPK_TRAIN: 2000  # Per FPN level
    PRE_NMS_TOPK_TEST: 1000  # Per FPN level
    # Detectron1 uses 2000 proposals per-batch,
    # (See "modeling/rpn/rpn_outputs.py" for details of this legacy issue)
    # which is approximately 1000 proposals per-image since the default batch size for FPN is 2.
    POST_NMS_TOPK_TRAIN: 1000
    POST_NMS_TOPK_TEST: 1000
  IMG_FDA_HEAD:
    NAME: "ImageFDAHead"
    IN_FEATURES: ["conv5_3"]
  ROI_HEADS:
    NAME: "DomainAdaptiveROIHeads"
    IN_FEATURES: ["conv5_3"]
  ROI_BOX_HEAD:
    NAME: "FastRCNNConvFCHead"
    NUM_FC: 2
    POOLER_RESOLUTION: 7
  INSTANCE_FDA_HEAD:
    NAME: "InstanceFDAHead"
    POOLER_RESOLUTION: 14
DATASETS:
  ROOT_DIR: "/lhome/peizhli/datasets"
  # "Cityscapes_train", "FoggyCityscapes_train", "Sim10k_train" or "Kitti_train"  
  TRAIN: ("Cityscapes_train", "FoggyCityscapes_train")
  # "Cityscapes_val", "FoggyCityscapes_val", "Sim10k_val" or "Kitti_val"
  TEST: ("Cityscapes_val",)
  EQUAL_FREQUENCY: True
DATALOADER:
  SAMPLER_TRAIN: EquallyDatasetsTrainingSampler
FOOC:
  SOURCE:
    COMPUTE_DET_LOSS: False
    COMPUTE_INST_LOSS: False
  TARGET:
    COMPUTE_DET_LOSS: False
    COMPUTE_INST_LOSS: False
SOLVER:
  IMS_PER_BATCH: 4
  BASE_LR: 1e-4
  STEPS: (60000, 80000)
  MAX_ITER: 10000
  MOMENTUM: 0.9
  WEIGHT_DECAY: 5e-4
INPUT:
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
VERSION: 2
TEST:
  EVAL_PERIOD: 1000
OUTPUT_DIR: "/lhome/peizhli/projects/FOOC/baseline/da_test"
